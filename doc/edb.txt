******************************************************************************************************
使用说明：
1）include "db.h" 此文件位于luomi/src/edb/inc目录下；
2）链接luomi静态库；
3）首先使用create_db建立一个数据库表，然后使用open_db打开这张表，然后就可以插入数据和查询数据，插入数据使用put_db，结束使用close_db关闭打开的表；支持同时打开不同的表来操作；
4)查询数据用open_query,然后使用move_next移动光标，接着使用fetch_col来获取列值，最后务必调用close_query关闭查询；

******************************************************************************************************
api参考：

-------------------------------------------------------------------------------------------------------
int create_db(char* root,char* name,unsigned char colCount,COL_TYPE colType[],unsigned short cacheSize,STORE_TYPE storeType,COMPRESS_TYPE compressType,unsigned char daysPerFile);
功能描述：创建指定格式和数据结构的表；
参数：
1）char* root:指定此数据表保存的目录位置，此目录必须已经存在；
2）char* name:指定表名称，程序会在root目录下创建一个子目录,这个参数指定了子目录的名字；
3）unsigned char colCount：指定表有多少列，注意时间戳不包含在内，时间戳列由系统自动产生；
4）COL_TYPE colType[]：列类型数组，此数组数目是前一个参数指定，列类型参看luomi.h文件的枚举定义，目前定义了9种数据类型；
5）unsigned short cacheSize：指定内存缓存的数据行数目，设定此参数需要考虑目标机器的资源情况，越大会消耗更多内存，
6）STORE_TYPE storeType：指定是按列存储还是按行存储，目前只支持按列存储STORE_BY_COL；
7）COMPRESS_TYPE compressType：指定压缩算法，目前只支持COMPRESS_TAOS_ONE_STEP，
8）hoursPerFile：指定一个数据文件保存多少小时的数据；
返回值：
0：成功创建；小于0出错；

---------------------------------------------------------------------------------------------------------
void* open_db(char* name)
功能描述：打开指定的数据表；
参数：
1）char* name:指定数据表全路径名称，即；create_db指定的root和name组成的子目录名称；

返回值：
数据库文件句柄，大于0：成功打开；返回NULL出错；

---------------------------------------------------------------------------------------------------------
void close_db(void* db)
功能描述：关闭之前打开的数据表；
参数：
1）void* db：open_db的返回值；

返回值：无

---------------------------------------------------------------------------------------------------------
int put_db(void* db,char* pData)
功能描述：插入一行数据；
参数：
1）void* db：open_db的返回值；
2）char* pData：要插入的一行数据，每列数据在pData中的位置必须与create_db中指定的COL_TYPE colType[]列类型数组一一对应，注意数据必须紧凑排列，不能有字节对齐；
返回值：
0：成功插入；小于0出错；

---------------------------------------------------------------------------------------------------------
QUERY* open_query(const void* handle,char* strStartTime, char* strEndTime,ORDER_TYPE order)
功能描述：打开查询，返回查询句柄；
参数：
1）void* handle：open_db的返回值；
2）strStartTime：查询时间起始值，格式：2019-11-13 11:32:00.000；
2）strEndTime：查询时间终点值，格式：2019-11-13 11:32:00.000；
3）ORDER_TYPE order：排序方式，取值：ORDER_ASC 升序，或者ORDER_DESC 降序；
返回值：
非NULL：成功返回查询句柄；NULL出错；

---------------------------------------------------------------------------------------------------------
void close_query(void* handle)
功能描述：关闭查询句柄；
参数：
1）void* open_query的返回值；

返回值：
无

---------------------------------------------------------------------------------------------------------
int move_next(void* handle)
功能描述：移动查询光标到下一个位置；
参数：
1）void* open_query的返回值；
返回值：
0：成功移动光标到新row位置；
小于0；或者出错、或者当前光标位置已经到最后一行、或者当前查询句柄中无数据；

---------------------------------------------------------------------------------------------------------
void* fetch_col(void* handle,int colIndex)
功能描述：获取当前行、指定列的内存地址；
参数：
1）void* open_query的返回值；
2）int colIndex：列序号，0为第一列，且固定为时间戳列；
返回值：
非NULL：成功获取指定列值的内存地址；
NULL；出错；